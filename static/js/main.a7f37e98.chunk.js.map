{"version":3,"sources":["components/Form/Form.jsx","components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Form","query","onChange","className","type","name","placeholder","value","TodoList","state","select","handleInputChange","event","target","setState","list","this","filter","todo","completed","props","userId","todos","selectUser","selectedTodos","filterTodos","filteredTodos","title","toLowerCase","includes","map","key","id","readOnly","checked","onClick","React","Component","defaultProps","request","url","fetch","then","response","ok","Error","status","statusText","json","getUsers","data","getTodos","a","users","getAllTodos","length","CurrentUser","user","loadUserData","prevProps","email","phone","resetUser","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7f37e98.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = ({ query, onChange }) => (\n  <form>\n    <input\n      className=\"form__input form\"\n      type=\"text\"\n      name=\"query\"\n      placeholder=\"find title...\"\n      value={query}\n      onChange={onChange}\n    />\n  </form>\n);\n\nForm.propTypes = {\n  query: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport { Form } from '../Form/Form';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    select: '',\n  }\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterTodos(list) {\n    switch (this.state.select) {\n      case 'Active':\n        return list.filter(todo => !todo.completed);\n      case 'Completed':\n        return list.filter(todo => todo.completed);\n      case 'By userId':\n        if (!this.props.userId) {\n          return list;\n        }\n\n        return list.filter(todo => todo.userId === this.props.userId);\n      default:\n        return list;\n    }\n  }\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { query, select } = this.state;\n\n    const selectedTodos = this.filterTodos(todos);\n\n    const filteredTodos = query\n      ? selectedTodos.filter(todo => todo.title.toLowerCase()\n        .includes(query.toLowerCase()))\n      : selectedTodos;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <Form\n          query={query}\n          onChange={this.handleInputChange}\n        />\n\n        <select\n          onChange={this.handleInputChange}\n          name=\"select\"\n          value={select}\n        >\n          <option value=\"All\">\n            All\n          </option>\n          <option value=\"Active\">\n            Active\n          </option>\n          <option value=\"Completed\">\n            Completed\n          </option>\n          <option value=\"By userId\">\n            This user only(choose a user and try)\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={`TodoList__item ${todo.completed === true\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}`}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={`${todo.completed === true\n                      ? 'checked'\n                      : ''}`}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ),\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}/${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getUsers = () => request('users')\n  .then(response => response.data);\n\nexport async function getTodos() {\n  const users = await getUsers();\n  const todos = await getAllTodos();\n  const filteredTodos = todos.filter(todo => todo.title && (\n    todo.userId && todo.userId <= users.length && todo.userId !== 0));\n\n  return filteredTodos;\n}\n\nconst getAllTodos = () => request('todos')\n  .then(response => response.data);\n\nexport const getUser = userId => request(`users/${userId}`)\n  .then(response => response.data);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUserData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUserData();\n    }\n  }\n\n  async loadUserData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return <div />;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button\"\n          onClick={this.props.resetUser}\n        >\n          Clear\n        </button>\n      </div>\n\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  resetUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  resetUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n          <TodoList\n            todos={todos}\n            userId={selectedUserId}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUser={this.resetUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}