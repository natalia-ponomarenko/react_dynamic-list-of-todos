{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","select","handleInputChange","event","value","target","setState","handleSelectChange","list","this","filter","todo","completed","props","userId","todos","selectUser","selectedTodos","filterTodos","filteredTodos","title","toLowerCase","includes","className","type","name","placeholder","onChange","map","key","id","readOnly","checked","onClick","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","loadData","prevProps","a","data","email","phone","resetUser","App","selectedUserId","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e9d8599.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    select: '',\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      query: value,\n    });\n  }\n\n  handleSelectChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      select: value,\n    });\n  }\n\n  filterTodos(list) {\n    switch (this.state.select) {\n      case 'Active':\n        return list.filter(todo => !todo.completed);\n      case 'Completed':\n        return list.filter(todo => todo.completed);\n      case 'By userId':\n        if (!this.props.userId) {\n          return list;\n        }\n\n        return list.filter(todo => todo.userId === this.props.userId);\n      default:\n        return list;\n    }\n  }\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { query, select } = this.state;\n\n    const selectedTodos = this.filterTodos(todos);\n\n    const filteredTodos = query\n      ? selectedTodos.filter(todo => todo.title.toLowerCase()\n        .includes(query.toLowerCase()))\n      : selectedTodos;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          className=\"form__input form\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"find title...\"\n          value={query}\n          onChange={this.handleInputChange}\n        />\n\n        <select\n          onChange={this.handleSelectChange}\n          value={select}\n        >\n          <option value=\"All\">\n            All\n          </option>\n          <option value=\"Active\">\n            Active\n          </option>\n          <option value=\"Completed\">\n            Completed\n          </option>\n          <option value=\"By userId\">\n            This user only(choose a user and try)\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={`TodoList__item ${todo.completed === true\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}`}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={`${todo.completed === true\n                      ? 'checked'\n                      : ''}`}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  todos: PropTypes.shape({\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        userId: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        completed: PropTypes.bool.isRequired,\n      }).isRequired,\n    ).isRequired,\n  }).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}/${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getTodos = () => request('todos');\nexport const getUser = userId => request(`users/${userId}`)\n  .then(response => response.data);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return <div />;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__button\"\n          onClick={this.props.resetUser}\n        >\n          Clear\n        </button>\n      </div>\n\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  resetUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data.filter(todo => todo.title && (\n        todo.userId && todo.userId <= 10 && todo.userId !== 0\n      )),\n    });\n  }\n\n  resetUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n          <TodoList\n            todos={todos}\n            userId={selectedUserId}\n            // eslint-disable-next-line\n            selectUser={(selectedUserId) => {\n              this.setState({ selectedUserId });\n            }}\n          />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUser={this.resetUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}